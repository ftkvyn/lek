<div id="setup" class="content" v-cloak>

  <h1>Cources</h1>
  <a href="/">Back</a>
  <ul id='list'>
	  
  </ul>
  <div class="new-vals">
	<input type="text" id="new-name" placeholder="Name" /> <br/>
	<input type="number" id="new-num" placeholder="Number of questions" /> <br />
	<button id='add'>Add</button>
	</div>
	<ul id='questions'>
	  
	</ul>

	<ul>
		<li style="text-align: center;"><a href="/questions">Answer the questions</a></li>
	</ul>
</div>

<script type="text/javascript">
	$(() => {
		const list = $('#list');
		const questions = $('#questions');
		let cources = [];
		let cource = {};

		function renderBtn(item) {
			const markup = `<li>
				<div class='cource-item' data-id='${item.id}'>
					<span class='name'>${item.name}</span> <span class='num'>(${item.questions.length})</span><button class='delete'>X</button>
				</div>
			</li>`;
			list.append(markup);
		}

		function renderQuestion(item) {
			const markup = `<li>
				<div class='question-item' data-id='${item.id}'>
					<span class='number'>${item.number}</span>
					<button class='set-val ${(item.answer == 'A' ? 'selected' : '')}' data-val='A'>A</button>
					<button class='set-val ${(item.answer == 'B' ? 'selected' : '')}' data-val='B'>B</button>
					<button class='set-val ${(item.answer == 'C' ? 'selected' : '')}' data-val='C'>C</button>
					<button class='set-val ${(item.answer == 'D' ? 'selected' : '')}' data-val='D'>D</button>
					<button class='set-val ${(item.answer == 'E' ? 'selected' : '')}' data-val='E'>E</button>
				</div>
			</li>`;
			questions.append(markup);
		}

		$.get('/api/getAllCources')
		.then((data) => {
			cources = data;
			data.forEach(renderBtn);
		});

		const newName = $('#new-name');
		const newNum = $('#new-num');
		$('body').on('click', '#add', function(){
			const model = {
				name : newName.val()
			};
			const num = newNum.val();
			if(!model.name || !num){
				return;
			}
			newName.val('');
			newNum.val('');
			$.post('/api/cource', model)
			.then((item) => {
				const questions = [];
				for(let i = 0; i < num; i++){
					questions.push({
						number: i + 1,
						cource: item.id
					});
				}
				$.post('/api/question/createMany', {data: questions} )
				.then((items) => {
					item.questions = items;
					cources.push(item);
					renderBtn(item);
				});
			});
		});

		$('body').on('click', '.delete', function(e){
			const btn = $(e.target);
			const name = btn.parent().find('.name').text();
			if(!confirm('Are you sure you want to delete cource ' + name + ' with all questions?')) {
				return;
			}
			
			const id = btn.parent().attr('data-id');

			$.ajax({
				url: '/api/cource/' + id,
				type: 'DELETE',
				success: function(result) {
					if (btn.parent().parent().is('.active')) {
						questions.empty();
					}
					btn.parent().parent().remove();
					const index = cources.findIndex(c => c.id === id);
					cources.splice(index, 1);
				}
			});
		});
	
		list.on('click', 'li', function(e) {
			const li = $(e.target).closest('li');
			const id = li.find('div').attr('data-id');
			$('li.active').removeClass('active');
			li.addClass('active');
			cource = cources.find(c => c.id === id);
			questions.empty();
			cource.questions
			.sort((a, b) => a.number - b.number)
			.forEach(renderQuestion);
			questions.find('li').first().click();
		});

		$('body').on('click', '.set-val', function(e){
			const btn = $(e.target);
			const li = btn.closest('li');
			const id = li.find('div').attr('data-id');
			const old = li.find('.selected');
			const answer = btn.text();
			if (old.length) {
				old.removeClass('selected');
			}
			btn.addClass('selected');
			const question = cource.questions.find(c => c.id === id);
			question.answer = answer;
			$.ajax({
				url: '/api/question/' + id,
				data: {
					answer: answer
				},
				type: 'PATCH',
				success: function(result) {
					
				}
			});
		});

		questions.on('click', 'li', function (e) {
			const li = $(e.target).closest('li');
			questions.find('.active').removeClass('active');
			li.addClass('active');
		});

		$(window).on('keydown', function(e){
			const li = questions.find('.active');
			if(!li || !li.length) {
				return;
			}
			if($(e.target).is('input')) {
				return;
			}
			let nextLi = null;
			const key = e.originalEvent.key;
			let value = null;
			let navigate = false;
			switch(key) {
				case 'ArrowUp': 
					nextLi = li.prev();
					navigate = true;
					break;
				case 'ArrowDown':
					nextLi = li.next();
					navigate = true;
					break;
				default:
					value = key.toUpperCase();
			}

			const btn = li.find(`.set-val[data-val=${value}]`);

			if(btn && btn.length) {
				nextLi = li.next();
				btn.click();
			}

			if (!navigate && (!nextLi || !nextLi.length)) {
				return;
			}
			li.removeClass('active');
			nextLi.addClass('active');

			$("html, body").animate({ scrollTop: nextLi.offset().top - 300 }, 100);

			e.preventDefault();
		})
	});
</script>
<%- /* Expose server-rendered data as window.SAILS_LOCALS :: */ exposeLocalsToBrowser() %>
